services:
    postgres:
        image: postgres:15
        container_name: postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=${POSTGRES_HOST}
        ports:
        - "5433:5432"
        volumes:
        - pg_data:/var/lib/postgresql/data
        networks:
        - mks

    redis:
        image: redis:7.0-alpine
        container_name: redis2
        command: redis-server --appendonly yes --replica-read-only no
        volumes:
            - ./volumes/redis/:/etc/redis/
        ports:
            - 6379:6379
        networks:
            - mks
        restart: unless-stopped

    backend:
        image: mosesmbadi/easymedbackend
        container_name: backend
        command: uvicorn --host 0.0.0.0 --port 8080 easymed.asgi:application
        ports:
            - 8080:8080
        env_file:
            - ./.env
        restart: unless-stopped
        depends_on:
            - redis
        networks:
            - mks
        labels:
            - "service: backend"

    worker:
        image: mosesmbadi/easymedbackend
        container_name: worker
        command: celery -A easymed worker --loglevel=INFO        
        restart: unless-stopped
        env_file:
            - ./.env    
        depends_on:
            - backend
            - redis
        networks:
            - mks   
        labels:
            - "service: worker"    

    frontend:
        image: mosesmbadi/easymedfrontend
        container_name: front-end
        restart: unless-stopped
        ports:
            - 3000:3000
        depends_on:
            - backend
        networks:
            - mks    

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
        - 9090:9090
        volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        depends_on:
        - backend
        - worker
        - redis
        labels:
        - "service: prometheus"

    db_backup:
        image: amazonlinux:2
        container_name: db_backup
        depends_on:
        - postgres
        volumes:
        - ./backup:/app
        environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - S3_BUCKET_NAME=${S3_BUCKET_NAME}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        working_dir: /app
        entrypoint: ["/bin/sh", "-c", "yum install -y postgresql aws-cli cronie && chmod +x /app/backup.sh && crontab /app/crontab && crond -f"]
        networks:
        - mks

volumes:
    pg_data:
    grafana_data:
    
networks:
    mks:
        name: mks
        driver: bridge
