services:
    postgres:
        image: postgres:15
        container_name: postgres
        env_file:
            - ./.env
        ports:
        - "5433:5432"
        volumes:
        - postgres_data:/var/lib/postgresql/data
        networks:
        - mks
    redis:
        image: redis:7.0-alpine
        container_name: redis
        command: redis-server --appendonly yes --replica-read-only no
        volumes:
            - ./volumes/redis/:/etc/redis/
        ports:
            - 6379:6379
        networks:
            - mks
        restart: unless-stopped

    backend:
        build:
            context: ./backend
            dockerfile: ./Dockerfile.local
        container_name: api
        command: python manage.py runserver 0.0.0.0:8080
        # command: uvicorn --host 0.0.0.0 --port 8080 easymed.asgi:application
        volumes:
            - ./backend:/app
        ports:
            - 8080:8080
        env_file:
            - ./.env
        restart: unless-stopped
        networks:
            - mks

    worker:
        build: ./backend
        container_name: "celery"
        restart: unless-stopped
        env_file:
            - ./.env    
        command: celery -A easymed worker --loglevel=INFO
        depends_on:
            - redis
        networks:
            - mks   
    
    celery-beat:
        build: ./backend
        container_name: celery-beat
        command: celery -A easymed beat --loglevel=INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
        env_file:
            - ./.env
        restart: unless-stopped
        depends_on:
            - redis
        networks:
            - mks    

    frontend:
        build:
            context: ./front-end
            dockerfile: ./Dockerfile.local
        container_name: easymed-frontend
        restart: unless-stopped
        ports:
            - 3000:3000
        depends_on:
            - backend 
        networks:
            - mks   


    flower:
        image: mher/flower
        container_name: flower
        command: celery flower
        environment:
        - CELERY_BROKER_URL=redis://redis:6379/0
        - FLOWER_PORT=8888
        ports:
        - 8888:8888
        depends_on:
            - redis
        networks:
            - mks  

    lis_server:
        image: mosesmbadi/hl7-astm-parser:latest
        container_name: lis-server
        ports:
            - 9091:9091
        env_file:
            - ./.env
        environment:
            - PYTHONUNBUFFERED=1
            - PYTHONPATH=/app/src
        command:
            [
                "uvicorn",
                "src.main:app",
                "--host",
                "0.0.0.0",
                "--port",
                "9091",
                "--reload",
            ]

        restart: unless-stopped
        networks:
            - mks        

    # TODO: Configuration and testing needed for thi
    # db_backup:
    #     image: amazonlinux:2
    #     container_name: db_backup
    #     depends_on:
    #     - postgres
    #     volumes:
    #     - ./backup:/app
    #     environment:
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     - POSTGRES_DB=${POSTGRES_DB}
    #     - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    #     - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    #     working_dir: /app
    #     entrypoint: ["/bin/sh", "-c", "yum install -y postgresql aws-cli cronie && chmod +x /app/backup.sh && crontab /app/crontab && crond -f"]
    #     networks:
    #     - mks


volumes:
    postgres_data:

networks:
    mks:
        name: mks
        driver: bridge
