name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev-moses
  pull_request:
    branches:
      - "**"    

env:
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  DEMO_SERVER_PRIVATE_KEY: ${{ secrets.DEMO_SERVER_PRIVATE_KEY }}
  DEMO_SERVER_IP: ${{ secrets.DEMO_SERVER_IP }}
  DEMO_SERVER_USERNAME: ${{ secrets.DEMO_SERVER_USER }}

jobs:
  cleanup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-moses'
    steps:
      - name: Docker system prune
        run: docker system prune -af

  build-nginx:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-moses'
    steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - name: Build & Push Nginx Image
        run: |
          cd nginx
          docker build . -t mosesmbadi/easymednginx:latest
          docker push mosesmbadi/easymednginx:latest

  build-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-moses'
    steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - name: Build & Push Backend Image
        run: |
          cd backend
          docker build . -t mosesmbadi/easymedbackend:latest
          docker push mosesmbadi/easymedbackend:latest

  build-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-moses'
    steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - name: Build & Push Frontend Image
        run: |
          cd front-end
          docker build . -t mosesmbadi/easymedfrontend:latest
          docker push mosesmbadi/easymedfrontend:latest

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend test image
        run: |
          docker build -f backend/Dockerfile -t backend-test:ci ./backend

      - name: Run backend system checks & unit tests
        run: |
          docker run --rm \
            -e SECRET_KEY='django-insecure-test-key-for-ci-only' \
            -e DJANGO_SETTINGS_MODULE=easymed.settings.base \
            -e DEBUG=True \
            -e EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend' \
            -e EMAIL_USE_TLS=True \
            -e EMAIL_HOST='localhost' \
            -e EMAIL_PORT=587 \
            -e EMAIL_HOST_USER='test@example.com' \
            -e EMAIL_HOST_PASSWORD='testpassword' \
            -e DEFAULT_FROM_EMAIL='test@example.com' \
            -e CELERY_BROKER_URL='memory://' \
            -e CELERY_RESULT_BACKEND='cache+memory://' \
            -e DB_ENGINE='django.db.backends.sqlite3' \
            -e POSTGRES_HOST='localhost' \
            -e POSTGRES_DB='test_db' \
            -e POSTGRES_USER='test_user' \
            -e POSTGRES_PASSWORD='test_password' \
            -e POSTGRES_PORT=5432 \
            -e S3_BUCKET_NAME='test-bucket' \
            -e AWS_ACCESS_KEY_ID='test-key-id' \
            -e AWS_SECRET_ACCESS_KEY='test-secret-key' \
            -e AWS_DEFAULT_REGION='us-east-1' \
            -e GEMINI_API_KEY='test-gemini-api-key-for-ci' \
            -e NEXT_PUBLIC_BACKEND_URL='http://localhost:8080/' \
            -e NEXT_PUBLIC_HMIS_VERSION='v0.0.1-test' \
            backend-test:ci sh -c "python manage.py check && pytest -v"

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-moses'
    needs:
      - test-backend
      - build-nginx
      - build-backend
      - build-frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          set -x
          mkdir -p ~/.ssh
          echo "${DEMO_SERVER_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DEMO_SERVER_IP >> ~/.ssh/known_hosts

      - name: Transfer .env
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./.env.sample $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/.env    

      - name: Transfer Prometheus config files
        run: |
          ssh -o StrictHostKeyChecking=no $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP "mkdir -p /home/$DEMO_SERVER_USERNAME/prometheus"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./prometheus/prometheus.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/prometheus/prometheus.yml
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./prometheus/rules.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/prometheus/rules.yml

      - name: Transfer docker-compose.yml
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/docker-compose.yml    

      - name: Deploy using remote Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP << 'EOF'
            echo "Stopping and removing old containers..."
            docker compose down --remove-orphans

            echo "Pulling new images..."
            docker compose pull

            echo "Starting containers..."
            docker compose up --build -d
          EOF
