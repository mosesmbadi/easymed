# Deployment file for Dounebain Diagnostics
name: CI/CD Pipeline

on:
  push:
    branches:
      - dev-moses
    

env:
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  DEMO_SERVER_PRIVATE_KEY: ${{ secrets.DEMO_SERVER_PRIVATE_KEY }}
  DEMO_SERVER_IP: ${{ secrets.DEMO_SERVER_IP }}
  DEMO_SERVER_USERNAME: ${{ secrets.DEMO_SERVER_USER }}

jobs:
  cleanup:
    if: github.ref == 'refs/heads/dev-moses'
    runs-on: ubuntu-latest
    steps:
      - name: Docker system prune
        run: docker system prune -af

  build-backend:
    if: github.ref == 'refs/heads/dev-moses'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - name: Build & Push Backend Image
        run: |
          cd backend
          docker build . -t mosesmbadi/easymedbackend:latest
          docker push mosesmbadi/easymedbackend:latest

  build-frontend:
    if: github.ref == 'refs/heads/dev-moses'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - name: Build & Push Frontend Image
        run: |
          cd front-end
          docker build . -t mosesmbadi/easymedfrontend:latest
          docker push mosesmbadi/easymedfrontend:latest

  deploy:
    if: github.ref == 'refs/heads/dev-moses'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          set -x
          mkdir -p ~/.ssh
          echo "${DEMO_SERVER_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh/id_rsa
          file ~/.ssh/id_rsa
          cat -n ~/.ssh/id_rsa | head -10
          ssh-keyscan -H $DEMO_SERVER_IP >> ~/.ssh/known_hosts
          echo "Key file exists:" && ls -l ~/.ssh/id_rsa
          echo "First few lines of key:"
          head -5 ~/.ssh/id_rsa
          echo "Key file size:"
          wc -c ~/.ssh/id_rsa

      - name: Transfer .env
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./.env.sample $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/.env    

      - name: Transfer Prometheus config files
        run: |
          ssh -o StrictHostKeyChecking=no $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP "mkdir -p /home/$DEMO_SERVER_USERNAME/prometheus"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./prometheus/prometheus.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/prometheus/prometheus.yml
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./prometheus/rules.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/prometheus/rules.yml

      - name: Transfer docker-compose.yml
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP:/home/$DEMO_SERVER_USERNAME/docker-compose.yml    

      - name: Deploy using remote Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no $DEMO_SERVER_USERNAME@$DEMO_SERVER_IP << 'EOF'
            pwd && ls -la
            echo "Stopping and removing old containers..."
            docker compose down --remove-orphans

            echo "Pulling new images..."
            docker compose pull

            echo "Starting containers..."
            docker compose up --build -d
          EOF
